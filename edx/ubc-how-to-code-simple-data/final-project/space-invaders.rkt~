;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname space-invaders) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/universe)
(require 2htdp/image)

;; Space Invaders


;; Constants:
;; =======================================================================
(define WIDTH  300)
(define HEIGHT 500)

(define INVADER-X-SPEED 1.5)  ;speeds (not velocities) in pixels per tick
(define INVADER-Y-SPEED 1.5)
(define TANK-SPEED 2)
(define MISSILE-SPEED 10)

(define HIT-RANGE 10)

(define INVADE-RATE 100)

(define BACKGROUND (empty-scene WIDTH HEIGHT))

(define INVADER
  (overlay/xy (ellipse 10 15 "outline" "blue")              ;cockpit cover
              -5 6
              (ellipse 20 10 "solid"   "blue")))            ;saucer

(define TANK
  (overlay/xy (overlay (ellipse 28 8 "solid" "black")       ;tread center
                       (ellipse 30 10 "solid" "green"))     ;tread outline
              5 -14
              (above (rectangle 5 10 "solid" "black")       ;gun
                     (rectangle 20 10 "solid" "black"))))   ;main body

(define TANK-HEIGHT/2 (/ (image-height TANK) 2))

(define MISSILE (ellipse 5 15 "solid" "red"))



;; Data Definitions:
;; =======================================================================
(define-struct game (invaders missiles tank))
;; Game is (make-game  (listof Invader) (listof Missile) Tank)
;; interp. the current state of a space invaders game
;;         with the current invaders, missiles and tank position

;; Game constants defined below Missile data definition

#;
(define (fn-for-game g)
  (... (fn-for-loi (game-invaders g))
       (fn-for-lom (game-missiles g))
       (fn-for-tank (game-tank g))))



(define-struct tank (x dir))
;; Tank is (make-tank Number Integer[-1, 1])
;; interp. the tank location is x, HEIGHT - TANK-HEIGHT/2 in screen coordinates
;;         the tank moves TANK-SPEED pixels per clock tick left if dir -1, right if dir 1

(define T0 (make-tank (/ WIDTH 2) 1))   ;center going right
(define T1 (make-tank 50 1))            ;going right
(define T2 (make-tank 50 -1))           ;going left

#;
(define (fn-for-tank t)
  (... (tank-x t) (tank-dir t)))


;; Direction is one of:
;; - -1
;; -  1
;; interp. the direction of the tank

;; <Examples are redundant for enumeration>

#;
(define (fn-for-direction d)
  (cond [(= d 1) (...)]
        [(= d -1) (...)]))


(define-struct invader (x y dx))
;; Invader is (make-invader Number Number Number)
;; interp. the invader is at (x, y) in screen coordinates
;;         the invader along x by dx pixels per clock tick

(define I1 (make-invader 150 100 12))           ;not landed, moving right
(define I2 (make-invader 150 HEIGHT -10))       ;exactly landed, moving left
(define I3 (make-invader 150 (+ HEIGHT 10) 10)) ;> landed, moving right


#;
(define (fn-for-invader i)
  (... (invader-x i) (invader-y i) (invader-dx i)))


;; ListOfInvader is one of:
;; - empty
;; - (cons Invader ListOfInvader)
;; interp. A list of Invaders

(define LOI0 empty)
(define LOI1 (cons I1 empty))
(define LOI2 (cons I2 (cons I1 empty)))
(define LOI3 (cons I3 (cons I2 (cons I1 empty))))

#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]
        [else
         (... (fn-for-invader (first loi))
              (fn-for-loi (rest loi)))]))


(define-struct missile (x y))
;; Missile is (make-missile Number Number)
;; interp. the missile's location is x y in screen coordinates

(define M1 (make-missile 150 300))                       ;not hit U1
(define M2 (make-missile (invader-x I1) (+ (invader-y I1) 10)))  ;exactly hit U1
(define M3 (make-missile (invader-x I1) (+ (invader-y I1)  5)))  ;> hit U1

#;
(define (fn-for-missile m)
  (... (missile-x m) (missile-y m)))


;; ListOfMissile is one of:
;; - empty
;; - (cons Missile ListOfMissile)
;; interp. A list of Missiles

(define LOM0 empty)
(define LOM1 (cons M1 empty))
(define LOM2 (cons M2 (cons M1 empty)))
(define LOM3 (cons M3 (cons M2 (cons M1 empty))))

#;
(define (fn-for-lom lom)
  (cond [(empty? lom) (...)]
        [else
         (... (fn-for-missile (first lom))
              (fn-for-lom (rest lom)))]))


(define G0 (make-game empty empty T0))
(define G1 (make-game empty empty T1))
(define G2 (make-game (list I1) (list M1) T1))
(define G3 (make-game (list I1 I2) (list M1 M2) T1))
(define G4 (make-game LOI3 LOM3 T1))

;; Functions:
;; =======================================================================

;; =========BIG BANG FUNCTIONS==========
;; Game -> Game
;; Start the world with (main (make-game empty empty (make-tank (/ WIDTH 2) 1)))
;; <Examples not necessary for main>
(define (main g)
  (big-bang g                            ; Game
            (on-tick advance-game)       ; Game -> Game
            (to-draw render-game)        ; Game -> Image
            (stop-when game-over?)       ; Game -> Boolean
            (on-key handle-key-event)))  ; Game KeyEvent -> Game


;; =========ON TICK FUNCTIONS==========
;; Game -> Game
;; Produce the next state of the game
(check-expect (advance-game G1) (make-game
                                 (advance-invaders (game-invaders G1))
                                 (advance-missiles (game-missiles G1) (game-invaders G1))
                                 (advance-tank (game-tank G1))))

; (define (advance-game g) G0) ; stub
; <Template taken from Game>
(define (advance-game g)
  (make-game (advance-invaders (game-invaders g))
             (advance-missiles (game-missiles g) (game-invaders g))
             (advance-tank (game-tank g))))


;; ListOfInvader -> ListOfInvader
;; Advance Invaders by Invaders X and Y Speed
;; !!!
(define (advance-invaders loi) loi) ; stub


;; ListOfMissile ListOfInvader -> ListOfMissile
;; Advance the state of the consumed lom
(check-expect (advance-missiles empty LOI1) empty)
(check-expect (advance-missiles LOM1 LOI1) (cons (make-missile (missile-x M1) (- (missile-y M1) MISSILE-SPEED)) empty)) ; no hit missile or past screen
(check-expect (advance-missiles LOM2 LOI1) (cons (make-missile (missile-x M1) (- (missile-y M1) MISSILE-SPEED)) empty)) ; M2 hit I1, no missiles past screen
(check-expect (advance-missiles (cons (make-missile (/ WIDTH 2) 0) LOM2) LOI1) (cons (make-missile (missile-x M2) (- (missile-y M2) MISSILE-SPEED))
                                                                                     (cons (make-missile (missile-x M1) (- (missile-y M1) MISSILE-SPEED)) empty)))

; (define (advance-missiles lom loi) lom) ; stub
; <Template taken from ListOfMissile w/ extra parameter>

(define (advance-missiles lom loi)
  (remove-offscreen-missiles (move-missiles (remove-hit-missiles lom loi))))


;; ListOfMissile ListOfInvder -> ListOfMissile
;; Remove missiles which have hit invaders
(check-expect (remove-hit-missiles empty LOI2) empty)
(check-expect (remove-hit-missiles (cons (make-missile 50 100) empty) (cons (make-invader 100 200) empty)) (cons (make-missile 50 100) empty)) ;; no hit
(check-expect (remove-hit-missiles (cons (make-missile 150 50) empty) (cons (make-invader 150 50) empty)) empty) ;; exact hit
(check-expect (remove-hit-missiles (cons (make-missile 150 50) empty) (cons (make-invader 145 45) empty)) empty) ;; hit within HIT-RANGE 

(define (remove-hit-missiles lom loi) lom) ; stub


;; ListOfMissile -> ListOfMissile
;; Move missiles in consumed lom
(check-expect (move-missiles empty) empty)
(check-expect (move-missiles LOM1) (cons (make-missile (missile-x M1) (- (missile-y M1) MISSILE-SPEED)) empty))
(check-expect (move-missiles LOM2) (cons (make-missile (missile-x M2) (- (missile-y M2) MISSILE-SPEED))
                                         (cons (make-missile (missile-x M1) (- (missile-y M1) MISSILE-SPEED)) empty)))
(check-expect (move-missiles (cons (make-missile 150 0) empty)) (cons (make-missile 150 (- 0 MISSILE-SPEED)) empty))

; (define (move-missiles lom) lom) ; stub
; <Template taken from ListOfMissile>

(define (move-missiles lom)
  (cond [(empty? lom) empty]
        [else
         (cons (move-missile (first lom))
               (move-missiles (rest lom)))]))


;; Missile -> Missile
;; Move missile up screen by MISSILE-SPEED
(check-expect (move-missile M1) (make-missile (missile-x M1) (- (missile-y M1) MISSILE-SPEED)))

; (define (move-missile m) m) ; stub
; <Template taken from Missile>

(define (move-missile m)
  (make-missile (missile-x m) (- (missile-y m) MISSILE-SPEED)))


;; ListOfMissile -> ListOfMissile
;; Remove missiles which have past the top of the screen (- (/ (image-height MISSILE) 2))
(check-expect (remove-offscreen-missiles empty) empty)
(check-expect (remove-offscreen-missiles (cons (make-missile 150 50) empty)) (cons (make-missile 150 50) empty))
(check-expect (remove-offscreen-missiles (cons (make-missile 150 (- (/ (image-height MISSILE) 2))) empty)) empty)
(check-expect (remove-offscreen-missiles (append LOM3 (cons (make-missile 150 (- (/ (image-height MISSILE) 2))) empty))) LOM3)
(check-expect (remove-offscreen-missiles (cons (make-missile 150 (- (/ (image-height MISSILE) 2))) (cons (make-missile 150 50) empty)))
              (cons (make-missile 150 50) empty))

; (define (remove-offscreen-missiles lom) lom) ; stub
; <Template taken from ListOfMissile>

(define (remove-offscreen-missiles lom)
  (cond [(empty? lom) empty]
        [else
         (if (offscreen? (first lom))
             (remove-offscreen-missiles (rest lom))
             (cons (first lom) (remove-offscreen-missiles (rest lom))))]))


;; Missile -> Boolean
;; Produce true if the missile is past the top of the screen
(check-expect (offscreen? (make-missile 150 50)) false)
(check-expect (offscreen? (make-missile 150 -25)) true)
(check-expect (offscreen? (make-missile 150 (- (/ (image-height MISSILE) 2)))) true)

; (define (offscreen? m) false) ; stub
; <Template taken from Missile>

(define (offscreen? m)
  (<= (missile-y m) (- (/ (image-height MISSILE) 2))))


;; Tank -> Tank
;; Advance Tank by TANK-SPEED
;; !!!
(define (advance-tank t) t) ; stub

;; =========TO DRAW FUNCTIONS==========
;; Game -> Image
;; Render the invaders, missiles, and tank on BACKGROUND
(check-expect (render-game G1) (render-invaders (game-invaders G1) (render-missiles (game-missiles G1) (render-tank (game-tank G1) BACKGROUND))))
(check-expect (render-game G2) (render-invaders (game-invaders G2) (render-missiles (game-missiles G2) (render-tank (game-tank G2) BACKGROUND))))
(check-expect (render-game G3) (render-invaders (game-invaders G3) (render-missiles (game-missiles G3) (render-tank (game-tank G3) BACKGROUND))))

; (define (render-game g) BACKGROUND) ; stub
; <Template taken from Game>

(define (render-game g)
  (render-invaders (game-invaders g) (render-missiles (game-missiles g) (render-tank (game-tank g) BACKGROUND))))


;; Tank Image -> Image
;; Render tank on consumed image at tank's x and at bottom of screen (HEIGHT - TANK-HEIGHT/2)
(check-expect (render-tank T0 BACKGROUND) (place-image TANK (tank-x T0) (- HEIGHT TANK-HEIGHT/2) BACKGROUND))
(check-expect (render-tank T1 BACKGROUND) (place-image TANK (tank-x T1) (- HEIGHT TANK-HEIGHT/2) BACKGROUND))

; (define (render-tank t img) BACKGROUND) ; stub
; <Template taken from Tank>

(define (render-tank t img)
  (place-image TANK (tank-x t) (- HEIGHT TANK-HEIGHT/2) img))


;; ListOfMissile Image -> Image
;; Render lom's on consumed image
(check-expect (render-missiles LOM0 BACKGROUND) BACKGROUND)
(check-expect (render-missiles LOM1 BACKGROUND) (render-missile M1 BACKGROUND))
(check-expect (render-missiles LOM2 BACKGROUND) (render-missile M2 (render-missile M1 BACKGROUND)))

; (define (render-missiles lom img) BACKGROUND) ; stub
; <Template taken from ListOfMissile>

(define (render-missiles lom img)
  (cond [(empty? lom) img]
        [else
         (render-missile (first lom) (render-missiles (rest lom) img))]))


;; Missile Image -> Image
;; Render missile's x and y position on consumed image
(check-expect (render-missile M1 BACKGROUND) (place-image MISSILE (missile-x M1) (missile-y M1) BACKGROUND))
(check-expect (render-missile M2 BACKGROUND) (place-image MISSILE (missile-x M2) (missile-y M2) BACKGROUND))

; (define (render-missile m img) BACKGROUND) ; stub
; <Template taken from Missile>

(define (render-missile m img)
  (place-image MISSILE (missile-x m) (missile-y m) img))


;; ListOfInvader Image -> Image
;; Render loi on consumed image
(check-expect (render-invaders LOI0 BACKGROUND) BACKGROUND)
(check-expect (render-invaders LOI1 BACKGROUND) (render-invader I1 BACKGROUND))
(check-expect (render-invaders LOI2 BACKGROUND) (render-invader I2 (render-invader I1 BACKGROUND)))

; (define (render-invaders loi img) BACKGROUND) ; stub
; <Template taken from ListOfInvader>

(define (render-invaders loi img)
  (cond [(empty? loi) img]
        [else
         (render-invader (first loi) (render-invaders (rest loi) img))]))


;; Invader Image -> Image
;; Render invader's x and y position on consumed image
(check-expect (render-invader I1 BACKGROUND) (place-image INVADER (invader-x I1) (invader-y I1) BACKGROUND))
(check-expect (render-invader I2 BACKGROUND) (place-image INVADER (invader-x I2) (invader-y I2) BACKGROUND))

; (define (render-invader i img) BACKGROUND) ; stub
; <Template taken from Invader>

(define (render-invader i img)
  (place-image INVADER (invader-x i) (invader-y i) img))


;; =========STOP WHEN FUNCTIONS==========
;; Game -> Boolean
;; Produce true if game is over (an invader has reached bottom edge of BACKGROUND)
(check-expect (game-over? G1) (invader-passed-tank? (game-invaders G1)))
(check-expect (game-over? G3) (invader-passed-tank? (game-invaders G3)))

; (define (game-over? g) false) ; stub
; <Template taken from Game>

(define (game-over? g)
  (invader-passed-tank? (game-invaders g)))


;; ListOfInvaders -> Boolean
;; Produce true if loi contains invader which passed bottom edge of BACKGROUND
(check-expect (invader-passed-tank? empty) false)
(check-expect (invader-passed-tank? LOI1) false)
(check-expect (invader-passed-tank? LOI2) true)
(check-expect (invader-passed-tank? LOI3) true)

; (define (invader-passed? loi) false) ; stub
; <Template taken from ListOfInvader>

(define (invader-passed-tank? loi)
  (cond [(empty? loi) false]
        [else
         (if (>= (invader-y (first loi)) HEIGHT)
             true
             (invader-passed-tank? (rest loi)))]))


;; =========KEY EVENT FUNCTIONS==========
;; Game KeyEvent -> Game
;; Move tank left or right with left or right arrow keys or 
;;    shoot missiles from tank using space key
(check-expect (handle-key-event (make-game empty empty (make-tank 50 -1)) "left") (change-tank-dir (make-game empty empty (make-tank 50 -1)) -1))
(check-expect (handle-key-event (make-game empty empty (make-tank 50 1)) "left") (change-tank-dir (make-game empty empty (make-tank 50 1)) -1))
(check-expect (handle-key-event (make-game empty empty (make-tank 50 -1)) "right") (change-tank-dir (make-game empty empty (make-tank 50 -1)) 1))
(check-expect (handle-key-event (make-game empty empty (make-tank 50 1)) "right") (change-tank-dir (make-game empty empty (make-tank 50 1)) 1))
(check-expect (handle-key-event (make-game empty empty T1) " ") (shoot-missile (make-game empty empty T1)))
(check-expect (handle-key-event (make-game (list I1) (list M1) T1) " ") (shoot-missile (make-game (list I1) (list M1) T1)))

; (define (handle-key-event g ke) G0) ; stub
#;
(define (handle-key-event g ke)
  (cond [(key=? "left" ke) (... g)]
        [(key=? "right" ke) (... g)]
        [(key=? " " ke) (... g)]
        [else g]))
;; Template formed using the large enumeration case

(define (handle-key-event g ke)
  (cond [(key=? "left" ke) (change-tank-dir g -1)]
        [(key=? "right" ke) (change-tank-dir g 1)]
        [(key=? " " ke) (shoot-missile g)]
        [else g]))


;; Game -> Game
;; Launch a missile from Tank
(check-expect (shoot-missile (make-game empty empty T1)) (make-game empty (add-missile empty T1) T1))
(check-expect (shoot-missile (make-game (list I1) (list M1) T1)) (make-game (list I1) (add-missile (list M1) T1) T1))

;(define (shoot-missile g) g) ; stub
; <Template taken from Game>
(define (shoot-missile g)
  (make-game (game-invaders g) (add-missile (game-missiles g) (game-tank g)) (game-tank g)))


;; ListOfMissile Tank -> ListOfMissile
;; Add a missile to consumed lom from tank's current position
(check-expect (add-missile empty T1) (cons (make-missile (tank-x T1) (- HEIGHT (image-height TANK))) empty))
(check-expect (add-missile (list M1) T1) (cons (make-missile (tank-x T1) (- HEIGHT (image-height TANK))) (cons M1 empty)))

; (define (add-missile lom t) lom) ; stub
; <Template taken from ListOfMissile>

(define (add-missile lom t)
  (cons (make-missile (tank-x t) (- HEIGHT (image-height TANK))) lom))


;; Game Direction -> Game
;; Change direction of game's tank based off of consumed direction value
(check-expect (change-tank-dir (make-game empty empty (make-tank 50 -1)) -1) (make-game empty empty (make-tank 50 -1)))
(check-expect (change-tank-dir (make-game empty empty (make-tank 50 -1)) 1) (make-game empty empty (make-tank 50 1)))
(check-expect (change-tank-dir (make-game empty empty (make-tank 50 1)) -1) (make-game empty empty (make-tank 50 -1)))
(check-expect (change-tank-dir (make-game empty empty (make-tank 50 1)) 1) (make-game empty empty (make-tank 50 1)))

; (define (change-tank-dir g d) g) ; stub
; <Template taken from Game>

(define (change-tank-dir g d)
  (make-game (game-invaders g) (game-missiles g) (make-tank (tank-x (game-tank g)) d)))