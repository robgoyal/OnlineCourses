// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

        // Operations to determine the outut
        Mux16(a = x, b = false, sel = zx, out = zxOUT);
        Mux16(a = y, b = false, sel = zy, out = zyOUT);
        Not16(in = zxOUT, out = NOTzxOUT);
        Not16(in = zyOUT, out = NOTzyOUT);
        Mux16(a = zxOUT, b = NOTzxOUT, sel = nx, out = nxOUT);
        Mux16(a = zyOUT, b = NOTzyOUT, sel = ny, out = nyOUT);
        And16(a = nxOUT, b = nyOUT, out = nxANDny);
        Add16(a = nxOUT, b = nyOUT, out = nxADDny);
        Mux16(a = nxANDny, b = nxADDny, sel = f, out = fOUT);
        Not16(in = fOUT, out = NOTfOUT);

        /* This MUX outputs the main value from the above operations but
           it also outputs values that are used in the calculations for 
           the control status */
        Mux16(a = fOUT, b = NOTfOUT, sel = no, out = out, out[0..7] = zeroCheck1, 
            out[8..15] = zeroCheck2, out[15] = negCheck);

        // ZR control output: Output 1 if out is zero, else output is 0
        Or8Way(in = zeroCheck1, out = OR8BIT1);
        Or8Way(in = zeroCheck2, out = OR8BIT2);
        Or(a = OR8BIT1, b = OR8BIT2, out = OR16BIT);
        Not(in = OR16BIT, out = zr);

        // NG control output: Output 1 if out is negative, else output is 0
        And(a = negCheck, b = true, out = ng);
}